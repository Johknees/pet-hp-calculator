{"version":3,"sources":["behavior.service.ts","pet-details.service.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["categoryList","feeding","description","weight","tally","vocalizations","grooming","rogue","cleric","paladin","ranger","barbarian","modList","dog","cat","fish","reptile","bird","equine","bug","amphibian","exotic","plant","baseHpList","BehaviorService","categoryName","props","type","class","Object","keys","initialState","petId","petList","curPet","id","name","level","duration","hp","behaviors","PetDetailsService","petState","window","localStorage","getItem","petJson","c","JSON","parse","this","json","stringify","setItem","Pet","bS","pS","theme","global","colors","brand","renderTallyUp","Button","icon","onClick","incrementBehaviorTally","asc","renderTallyDn","active","state","petInd","behaviorCategory","behaviorInd","handleInput","e","value","target","setState","prevState","newPet","handleDurationInput","onAddItem","emptyPet","showSidebar","onRemoveItem","filter","pet","onEditItem","map","lvl","calculateLevel","calculateHp","classBehavior","getBehaviorsForCategory","saveButtonAction","bind","newPL","slice","newBehavior","levelNom","getLevelforBehavior","denom","Math","floor","u","b","getBaseHp","m","getLevelMod","behaviorList","forEach","behavior","tRowList","category","index","rowkey","replace","key","Fragment","className","tbody","renderBehaviorRow","TextInput","placeholder","onChange","classList","Select","options","typeList","petTabs","Tab","title","Box","flex","renderPetInfo","renderBehaviorTable","Tabs","assign","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","Heading","margin","update","size","Layer","fill","renderInputs","Collapsible","open","width","renderNameInput","renderClassPicker","renderTypePicker","renderDurationInput","renderSaveButton","button","renderAddSaveButton","renderEditSaveButton","Grommet","full","ResponsiveContext","Consumer","renderHeader","overflow","horizontal","renderSidebar","renderPetTabs","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7d481bb3.chunk.js","sourcesContent":["import { Behavior, BehaviorCategoryMap, PetClass, PetType, PetModEntryMap, PetBaseHpEntryMap } from \"./pet\";\r\n\r\n\r\nlet categoryList: BehaviorCategoryMap = {\r\n    feeding: [\r\n        {\r\n            description: \"Eating normal food\",\r\n            weight: 1,\r\n            tally: 0\r\n        }, {\r\n            description: \"Hunting\",\r\n            weight: 2,\r\n            tally: 0\r\n        }, {\r\n            description: \"Scavenging\",\r\n            weight: 2,\r\n            tally: 0\r\n        }],\r\n    vocalizations: [\r\n        {\r\n            description: \"Song\",\r\n            weight: 1,\r\n            tally: 0\r\n        }, {\r\n            description: \"Alarm Call\",\r\n            weight: 1,\r\n            tally: 0\r\n        }, {\r\n            description: \"Funny vocalization\",\r\n            weight: 2,\r\n            tally: 0\r\n        }],\r\n    grooming: [\r\n        {\r\n            description: \"Preening\",\r\n            weight: 1,\r\n            tally: 0\r\n        }, {\r\n            description: \"Bathing\",\r\n            weight: 1,\r\n            tally: 0\r\n        }, {\r\n            description: \"Social Grooming\",\r\n            weight: 2,\r\n            tally: 0\r\n        }],\r\n    rogue: [\r\n        {\r\n            description: \"Mischievous action\",\r\n            weight: 3,\r\n            tally: 0\r\n        }, {\r\n            description: \"Stealing something\",\r\n            weight: 4,\r\n            tally: 0\r\n        }, {\r\n            description: \"Surprising the shit out you\",\r\n            weight: 5,\r\n            tally: 0\r\n        }],\r\n    cleric: [\r\n        {\r\n            description: \"Soothing action\",\r\n            weight: 3,\r\n            tally: 0\r\n        }, {\r\n            description: \"Gentle touch\",\r\n            weight: 4,\r\n            tally: 0\r\n        }, {\r\n            description: \"Appearing in your hour of need\",\r\n            weight: 5,\r\n            tally: 0\r\n        }],\r\n    paladin: [\r\n        {\r\n            description: \"Loyal action\",\r\n            weight: 3,\r\n            tally: 0\r\n        }, {\r\n            description: \"Doing good deeds\",\r\n            weight: 4,\r\n            tally: 0\r\n        }, {\r\n            description: \"Bringing you something you didn't ask for\",\r\n            weight: 5,\r\n            tally: 0\r\n        }],\r\n    ranger: [\r\n        {\r\n            description: \"Clever action\",\r\n            weight: 3,\r\n            tally: 0\r\n        }, {\r\n            description: \"Gazing contemplatively\",\r\n            weight: 4,\r\n            tally: 0\r\n        }, {\r\n            description: \"Ignoring you completely\",\r\n            weight: 5,\r\n            tally: 0\r\n        }],\r\n    barbarian: [\r\n        {\r\n            description: \"Impolite action\",\r\n            weight: 3,\r\n            tally: 0\r\n        }, {\r\n            description: \"Courageous feat\",\r\n            weight: 4,\r\n            tally: 0\r\n        }, {\r\n            description: \"Not giving a shit about smart stuff\",\r\n            weight: 5,\r\n            tally: 0\r\n        }]\r\n};\r\n\r\nlet modList: PetModEntryMap = {\r\n    dog: 2.4,\r\n    cat: 2.0,\r\n    fish: 3.1,\r\n    reptile: 2.8,\r\n    bird: 2.3,\r\n    equine: 2.4,\r\n    \"small mammal\": 2.4,\r\n    bug: 2.3,\r\n    amphibian: 2.2,\r\n    \"farm animal\": 2.2,\r\n    exotic: 2.8,\r\n    plant: 2.2\r\n}\r\n\r\nlet baseHpList: PetBaseHpEntryMap = {\r\n    dog: {\r\n        rogue: 35,\r\n        cleric: 76,\r\n        paladin: 116,\r\n        ranger: 156,\r\n        barbarian: 196\r\n    },\r\n    cat: {\r\n        rogue: 40,\r\n        cleric: 75,\r\n        paladin: 110,\r\n        ranger: 144,\r\n        barbarian: 179\r\n    },\r\n    fish: {\r\n        rogue: 20,\r\n        cleric: 73,\r\n        paladin: 126,\r\n        ranger: 178,\r\n        barbarian: 231\r\n    },\r\n    reptile: {\r\n        rogue: 30,\r\n        cleric: 78,\r\n        paladin: 126,\r\n        ranger: 173,\r\n        barbarian: 221\r\n    },\r\n    bird: {\r\n        rogue: 40,\r\n        cleric: 79,\r\n        paladin: 116,\r\n        ranger: 154,\r\n        barbarian: 191\r\n    },\r\n    equine: {\r\n        rogue: 45,\r\n        cleric: 86,\r\n        paladin: 126,\r\n        ranger: 166,\r\n        barbarian: 206\r\n    },\r\n    \"small mammal\": {\r\n        rogue: 10,\r\n        cleric: 51,\r\n        paladin: 91,\r\n        ranger: 131,\r\n        barbarian: 171\r\n    },\r\n    bug: {\r\n        rogue: 1,\r\n        cleric: 40,\r\n        paladin: 77,\r\n        ranger: 115,\r\n        barbarian: 152\r\n    },\r\n    amphibian: {\r\n        rogue: 140,\r\n        cleric: 77,\r\n        paladin: 114,\r\n        ranger: 150,\r\n        barbarian: 187\r\n    },\r\n    \"farm animal\": {\r\n        rogue: 50,\r\n        cleric: 88,\r\n        paladin: 126,\r\n        ranger: 163,\r\n        barbarian: 201\r\n    },\r\n    exotic: {\r\n        rogue: 35,\r\n        cleric: 83,\r\n        paladin: 130,\r\n        ranger: 177,\r\n        barbarian: 224\r\n    },\r\n    plant: {\r\n        rogue: 30,\r\n        cleric: 68,\r\n        paladin: 106,\r\n        ranger: 143,\r\n        barbarian: 181\r\n    }\r\n}\r\n\r\nexport class BehaviorService {\r\n\r\n    getBehaviorsForCategory(categoryName: string): Behavior[] {\r\n        return categoryList[categoryName];\r\n    }\r\n\r\n    getBaseHp(props: { class: PetClass, type: PetType }) {\r\n        return baseHpList[props.type][props.class];\r\n    }\r\n    getLevelMod(props: { type: PetType }) {\r\n        return modList[props.type];\r\n    }\r\n\r\n    get behaviorCategories(): string[] {\r\n        let categoryNameList: string[] = Object.keys(categoryList);\r\n        return categoryNameList;\r\n    }\r\n\r\n    get classList(): PetClass[] {\r\n        return (\r\n            [\r\n                \"rogue\",\r\n                \"cleric\",\r\n                \"paladin\",\r\n                \"ranger\",\r\n                \"barbarian\"\r\n            ]\r\n        )\r\n    }\r\n\r\n    get typeList(): PetType[] {\r\n        return (\r\n            [\r\n                \"dog\",\r\n                \"cat\",\r\n                \"fish\",\r\n                \"reptile\",\r\n                \"bird\",\r\n                \"equine\",\r\n                \"small mammal\",\r\n                \"bug\",\r\n                \"amphibian\",\r\n                \"farm animal\",\r\n                \"exotic\",\r\n                \"plant\"\r\n            ]\r\n        )\r\n    }\r\n}","import { PetState } from \"./pet\";\r\n\r\nlet initialState: PetState = {\r\n    petId: 0,\r\n    petList: [],\r\n    curPet: {\r\n        id: 0,\r\n        name: \"\",\r\n        type: \"cat\",\r\n        class: \"barbarian\",\r\n        level: 0,\r\n        duration: 0,\r\n        hp: 0,\r\n        behaviors: {\r\n            feeding: [],\r\n            vocalizations: [],\r\n            grooming: [],\r\n            class: []\r\n        }\r\n    }\r\n};\r\n\r\nexport class PetDetailsService {\r\n\r\n    petState: PetState = initialState;\r\n    constructor() {\r\n        if (window.localStorage.getItem('pet-details')) {\r\n            let petJson = window.localStorage.getItem('pet-details');\r\n            if (petJson !== null) {\r\n                let c: PetState = JSON.parse(petJson);\r\n                this.petState = c;\r\n            }\r\n        }\r\n    }\r\n\r\n    update(petState: PetState) {\r\n        let json = JSON.stringify(petState);\r\n        window.localStorage.setItem('pet-details', json);\r\n    }\r\n\r\n    get savedState() {\r\n        return this.petState;\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Box, Grommet, Button, Heading, Collapsible, ResponsiveContext, Layer, Select, Tabs, Tab, TextInput } from 'grommet';\r\nimport * as Icons from 'grommet-icons'\r\nimport { PetInterface, Behavior, BehaviorCategory, PetClass, PetType } from './pet'\r\nimport { BehaviorService } from './behavior.service'\r\nimport { PetDetailsService } from './pet-details.service'\r\nimport './App.css'\r\n\r\nlet App: React.FC = () => {\r\n\r\n  let pt: Pet = new Pet({});\r\n\r\n\r\n  return (\r\n    pt.render()\r\n  );\r\n}\r\n\r\ntype saveButtonAction = \"add\" | \"edit\";\r\n\r\nclass Pet extends Component<{}, { petId: number; showSidebar: boolean; petList: PetInterface[], curPet: PetInterface, saveButtonAction: saveButtonAction }> {\r\n  // state: any;\r\n  bS: BehaviorService;\r\n  pS: PetDetailsService;\r\n  theme = {\r\n    global: {\r\n      colors: {\r\n        brand: '#228BE6',\r\n      },\r\n    },\r\n  };\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.bS = new BehaviorService();\r\n    this.pS = new PetDetailsService();\r\n    this.state = {\r\n      petId: 0,\r\n      showSidebar: false,\r\n      petList: [],\r\n      curPet: {\r\n        id: 0,\r\n        name: \"tmp\",\r\n        type: \"cat\",\r\n        class: \"barbarian\",\r\n        level: 0,\r\n        duration: 0,\r\n        hp: 0,\r\n        behaviors: {\r\n          feeding: this.bS.getBehaviorsForCategory(\"feeding\"),\r\n          vocalizations: this.bS.getBehaviorsForCategory(\"vocalizations\"),\r\n          grooming: this.bS.getBehaviorsForCategory(\"grooming\"),\r\n          class: this.bS.getBehaviorsForCategory(\"barbarian\")\r\n        }\r\n      },\r\n      saveButtonAction: \"add\"\r\n    };\r\n    this.incrementBehaviorTally.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this.pS.petState);\r\n  }\r\n\r\n  renderTallyUp = (props: { petInd: number, behaviorInd: number, behaviorCategory: BehaviorCategory }): JSX.Element => {\r\n    return (\r\n      <Button\r\n        icon={<Icons.Add />}\r\n        onClick={() => this.incrementBehaviorTally({ asc: true, ...props })}\r\n      />\r\n    )\r\n  }\r\n  renderTallyDn = (props: { petInd: number, behaviorInd: number, behaviorCategory: BehaviorCategory }): JSX.Element => {\r\n    let active: boolean = this.state.petList[props.petInd].behaviors[props.behaviorCategory][props.behaviorInd].tally > 0\r\n    return (\r\n      <Button\r\n        icon={<Icons.Subtract />}\r\n        active={active}\r\n        onClick={() => this.incrementBehaviorTally({ asc: false, ...props })}\r\n      />\r\n    )\r\n  }\r\n\r\n  incrementBehaviorTally(props: { petInd: number, behaviorInd: number, behaviorCategory: BehaviorCategory, asc: boolean }) {\r\n    this.setState((prevState) => {\r\n      let newPL: PetInterface[] = prevState.petList.slice();\r\n      let newPet: PetInterface = newPL[props.petInd];\r\n      let newBehavior: Behavior[] = newPet.behaviors[props.behaviorCategory].slice();\r\n      if (props.asc) {\r\n        newBehavior[props.behaviorInd].tally++\r\n      } else {\r\n        if (newBehavior[props.behaviorInd].tally > 0) {\r\n          newBehavior[props.behaviorInd].tally--\r\n        }\r\n      }\r\n      newPet.behaviors[props.behaviorCategory] = newBehavior;\r\n      newPet.level = this.calculateLevel({ pet: newPet });\r\n      newPL[props.petInd] = newPet\r\n      return ({\r\n        petList: newPL\r\n      })\r\n    })\r\n  }\r\n\r\n  calculateLevel(props: { pet: PetInterface }) {\r\n    let levelNom: number = 0;\r\n    levelNom += this.getLevelforBehavior(props.pet.behaviors.feeding);\r\n    levelNom += this.getLevelforBehavior(props.pet.behaviors.grooming);\r\n    levelNom += this.getLevelforBehavior(props.pet.behaviors.vocalizations);\r\n    levelNom += this.getLevelforBehavior(props.pet.behaviors.class);\r\n    let denom: number = props.pet.duration\r\n    if (props.pet.duration <= 0) {\r\n      denom = 1;\r\n    }\r\n    let level = Math.floor(levelNom / denom);\r\n\r\n    return level;\r\n  }\r\n\r\n  calculateHp(props: { pet: PetInterface }) {\r\n    let u = this.calculateLevel(props);\r\n    // b+(um)\r\n    let b = this.bS.getBaseHp({ class: props.pet.class, type: props.pet.type });\r\n    let m = this.bS.getLevelMod({ type: props.pet.type });\r\n    return Math.floor(b + (u * m));\r\n  }\r\n\r\n  getLevelforBehavior(behaviorList: Behavior[]) {\r\n    let level: number = 0;\r\n    behaviorList.forEach(behavior => {\r\n      level += (behavior.tally * behavior.weight);\r\n    });\r\n    return level;\r\n  }\r\n\r\n  renderBehaviorRow(props: { petInd: number, category: BehaviorCategory }) {\r\n    let categoryRowList = this.state.petList[props.petInd].behaviors[props.category];\r\n    let tRowList = categoryRowList.map((behavior: Behavior, index: number) => {\r\n      // let behavior = this.state.behaviors[index];\r\n      let rowkey: string = behavior.description.replace(\" \", \"-\");\r\n      return (\r\n        <tr key={rowkey + \"-row\"}>\r\n          <td key={rowkey + \"-des\"}>{behavior.description}</td>\r\n          <td key={rowkey + \"-tally\"}>{behavior.tally}</td>\r\n          <td key={rowkey + \"-inc\"}>\r\n            {this.renderTallyDn({ petInd: props.petInd, behaviorInd: index, behaviorCategory: props.category })}\r\n            {this.renderTallyUp({ petInd: props.petInd, behaviorInd: index, behaviorCategory: props.category })}</td>\r\n        </tr>\r\n      )\r\n    });\r\n    let rowkey: string = props.category;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <tr className=\"behavior-category-row\" key={rowkey + \"-row\"}>\r\n          <td key={rowkey + \"-des\"} className=\"behavior-category-title\">{props.category}</td>\r\n        </tr>\r\n        {tRowList}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  renderBehaviorTable(props: { petInd: number }) {\r\n\r\n    let tbody = (\r\n      <React.Fragment>\r\n        {this.renderBehaviorRow({ category: \"feeding\", ...props })}\r\n        {this.renderBehaviorRow({ category: \"vocalizations\", ...props })}\r\n        {this.renderBehaviorRow({ category: \"grooming\", ...props })}\r\n        {this.renderBehaviorRow({ category: \"class\", ...props })}\r\n      </React.Fragment>\r\n    )\r\n\r\n    let tbl = <table>\r\n      <thead><tr key=\"behavior-headers\"><th>Behavior</th><th>Tally</th></tr></thead>\r\n      <tbody>{tbody}</tbody>\r\n    </table>\r\n\r\n    return tbl;\r\n  }\r\n\r\n  handleInput = (e: any) => {\r\n    let { value } = e.target\r\n    this.setState((prevState) => {\r\n      let newPet = prevState.curPet;\r\n      newPet.name = value;\r\n      return ({\r\n        curPet: newPet\r\n      })\r\n    });\r\n  }\r\n\r\n\r\n  renderNameInput() {\r\n    return (\r\n      <TextInput\r\n        placeholder=\"name\"\r\n        value={this.state.curPet.name}\r\n        onChange={this.handleInput}\r\n      />\r\n    )\r\n  }\r\n\r\n  handleDurationInput = (e: any) => {\r\n    let { value } = e.target\r\n    this.setState((prevState) => {\r\n      let newPet = prevState.curPet;\r\n      newPet.duration = value;\r\n      return ({\r\n        curPet: newPet\r\n      })\r\n    });\r\n  }\r\n\r\n  renderDurationInput() {\r\n    return (\r\n      <TextInput\r\n        type=\"number\"\r\n        value={this.state.curPet.duration}\r\n        onChange={this.handleDurationInput}\r\n      />\r\n    )\r\n  }\r\n\r\n  renderClassPicker() {\r\n    let classList: PetClass[] = this.bS.classList;\r\n\r\n    return (\r\n      <Select\r\n        options={classList}\r\n        value={this.state.curPet.class}\r\n\r\n        onChange={(e) => this.setState((prevState) => {\r\n          let newPet = prevState.curPet;\r\n          newPet.class = e.value;\r\n          return ({\r\n            curPet: newPet\r\n          })\r\n        })}\r\n      />\r\n    )\r\n  }\r\n\r\n  renderTypePicker() {\r\n    let typeList: PetType[] = this.bS.typeList\r\n    return (\r\n      <Select\r\n        options={typeList}\r\n        value={this.state.curPet.type}\r\n\r\n        onChange={(e) => this.setState((prevState) => {\r\n          let newPet = prevState.curPet;\r\n          newPet.type = e.value;\r\n          return ({\r\n            curPet: newPet\r\n          })\r\n        })}\r\n      />\r\n    )\r\n  }\r\n\r\n  renderPetTabs() {\r\n\r\n    let petTabs = this.state.petList.map((pet: PetInterface, index: number) => {\r\n      return (\r\n        <Tab key={pet.id + \"-tab\"} title={pet.name}>\r\n          <Box key={pet.id + \"info-box\"} flex>\r\n            {this.renderPetInfo({ pet: pet })}\r\n            {this.renderBehaviorTable({ petInd: index })}\r\n          </Box>\r\n        </Tab>\r\n      )\r\n    });\r\n    return (<Tabs>\r\n      {petTabs}\r\n    </Tabs>)\r\n  }\r\n\r\n  renderPetInfo(props: { pet: PetInterface }) {\r\n    let level = this.calculateLevel(props);\r\n    let hp = this.calculateHp(props);\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"pet-info\">\r\n          {props.pet.name}<br />\r\n          {\"Level \" + level + \" \" + props.pet.type + \" \" + props.pet.class}<br />\r\n          {\"HP: \" + hp}\r\n        </div>\r\n        <Button\r\n          icon={<Icons.Edit />}\r\n          onClick={() => {\r\n            this.setState({ showSidebar: true, curPet: Object.assign({}, props.pet), saveButtonAction: \"edit\" })\r\n          }}\r\n        />\r\n        <Button\r\n          icon={<Icons.Clear />}\r\n          onClick={() => {\r\n            this.setState({ showSidebar: true, curPet: Object.assign({}, props.pet) }, () => this.onRemoveItem())\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  emptyPet(): PetInterface {\r\n    return ({\r\n      id: this.state.petId,\r\n      name: \"\",\r\n      type: \"cat\",\r\n      class: \"barbarian\",\r\n      level: 0,\r\n      duration: 0,\r\n      hp: 0,\r\n      behaviors: {\r\n        feeding: this.bS.getBehaviorsForCategory(\"feeding\"),\r\n        vocalizations: this.bS.getBehaviorsForCategory(\"vocalizations\"),\r\n        grooming: this.bS.getBehaviorsForCategory(\"grooming\"),\r\n        class: this.bS.getBehaviorsForCategory(\"barbarian\")\r\n      }\r\n    })\r\n  }\r\n\r\n  renderHeader() {\r\n    let AppBar = (props: any) => (\r\n      <Box\r\n        tag='header'\r\n        direction='row'\r\n        align='center'\r\n        justify='between'\r\n        background='brand'\r\n        pad={{ left: 'medium', right: 'small', vertical: 'small' }}\r\n        elevation='medium'\r\n        style={{ zIndex: '1' }}\r\n        {...props}\r\n      />\r\n    );\r\n    return (\r\n      <AppBar>\r\n        <Heading level='3' margin='none'>Pet HP Calculator</Heading>\r\n        <Button\r\n          icon={<Icons.AddCircle />}\r\n          onClick={() => this.setState(prevState => ({ showSidebar: !prevState.showSidebar, curPet: this.emptyPet(), saveButtonAction: \"add\" }))}\r\n        />\r\n        <Button\r\n          icon={<Icons.Save />}\r\n          onClick={() => this.pS.update({ curPet: this.state.curPet, petId: this.state.petId, petList: this.state.petList })}\r\n        />\r\n      </AppBar>)\r\n  }\r\n\r\n\r\n\r\n  renderSidebar(size: string) {\r\n\r\n    return (!this.state.showSidebar || size !== 'small') ? (\r\n      <Collapsible direction=\"horizontal\" open={this.state.showSidebar}>\r\n        <Box\r\n          flex\r\n          width='medium'\r\n          background='light-2'\r\n          elevation='small'\r\n          align='center'\r\n          justify='center'\r\n        >\r\n          {this.renderInputs()}\r\n        </Box>\r\n      </Collapsible>\r\n    ) : (\r\n        <Layer>\r\n          <Box\r\n            background='light-2'\r\n            tag='header'\r\n            justify='end'\r\n            align='center'\r\n            direction='row'\r\n          >\r\n            <Button\r\n              icon={<Icons.FormClose />}\r\n              onClick={() => this.setState({ showSidebar: false })}\r\n            />\r\n          </Box>\r\n          <Box\r\n            fill\r\n            background='light-2'\r\n            align='center'\r\n            justify='center'\r\n          >\r\n            {this.renderInputs()}\r\n          </Box>\r\n        </Layer>)\r\n  }\r\n\r\n  onAddItem = () => {\r\n    this.setState(prevState => {\r\n      let newPL: PetInterface[] = [...prevState.petList, prevState.curPet];\r\n      return {\r\n        petList: newPL,\r\n        petId: prevState.petId + 1,\r\n        curPet: this.emptyPet(),\r\n        showSidebar: false\r\n      };\r\n    });\r\n  };\r\n\r\n  onRemoveItem = () => {\r\n    this.setState(prevState => {\r\n      let newPL: PetInterface[] = prevState.petList.filter((pet) => {\r\n        return pet.id !== prevState.curPet.id\r\n      });\r\n      return {\r\n        petList: newPL,\r\n        curPet: this.emptyPet(),\r\n        showSidebar: false\r\n      };\r\n    });\r\n  };\r\n\r\n  onEditItem = () => {\r\n    this.setState(prevState => {\r\n      let newPL: PetInterface[] = prevState.petList.map((pet) => {\r\n        if (pet.id === prevState.curPet.id) {\r\n          let lvl: number = this.calculateLevel({ pet: prevState.curPet });\r\n          let hp: number = this.calculateHp({ pet: prevState.curPet });\r\n          let classBehavior: Behavior[] = this.bS.getBehaviorsForCategory(prevState.curPet.class)\r\n          prevState.curPet.level = lvl;\r\n          prevState.curPet.hp = hp;\r\n          prevState.curPet.behaviors.class = classBehavior;\r\n          pet = prevState.curPet\r\n        }\r\n        return pet\r\n      })\r\n      return {\r\n        petList: newPL,\r\n        curPet: this.emptyPet(),\r\n        showSidebar: false\r\n      };\r\n    });\r\n  };\r\n\r\n  renderInputs() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.renderNameInput()}\r\n        {this.renderClassPicker()}\r\n        {this.renderTypePicker()}\r\n        {this.renderDurationInput()}\r\n        {this.renderSaveButton()}\r\n      </React.Fragment>\r\n    )\r\n  }\r\n\r\n  renderSaveButton() {\r\n    let button: any;\r\n    switch (this.state.saveButtonAction) {\r\n      case \"add\":\r\n        button = this.renderAddSaveButton()\r\n        break;\r\n      case \"edit\":\r\n        button = this.renderEditSaveButton()\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    return button;\r\n  }\r\n\r\n  renderAddSaveButton() {\r\n    return (\r\n      <Button\r\n        icon={<Icons.Add />}\r\n        onClick={() => this.onAddItem()}\r\n      />\r\n    )\r\n  }\r\n  renderEditSaveButton() {\r\n    return (\r\n      <Button\r\n        icon={<Icons.Save />}\r\n        onClick={() => this.onEditItem()}\r\n      />\r\n    )\r\n  }\r\n  renderRemoveButton() {\r\n    return (\r\n      <Button\r\n        icon={<Icons.Clear />}\r\n        onClick={() => this.onRemoveItem()}\r\n      />\r\n    )\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <Grommet theme={this.theme} full>\r\n        <ResponsiveContext.Consumer>\r\n          {size => (\r\n            <Box fill>\r\n              {this.renderHeader()}\r\n              <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\r\n                {this.renderSidebar(size)}\r\n                <Box flex align=\"center\">\r\n                  {this.renderPetTabs()}\r\n                </Box>\r\n              </Box>\r\n            </Box >\r\n          )}\r\n        </ResponsiveContext.Consumer>\r\n      </Grommet >\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pet;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Pet from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Pet />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}